// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static int sum_for_division; 
        /** Initializes the library. */
        function void init() {
            let sum_for_division = 0;
            return;

        }
        /**
        Retruns if the the i'th bit of x(in binary representation) is 1 or 0 */
        function boolean bit(int x, int i){
            var int j, bit;
            let j = 0;
            while (j < i) {
                let x = #x;
                let j = j+1;
            }

            let bit = x & 1; // mask out all bits other than the first

            return (bit = 1);
        }
        /** Returns the absolute value of x. */
        function int abs(int x) {
            if (x < 0){
                return -x;
            }
            return x;
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum
            var int sum, shiftedx, i;
            var boolean signX,signY;
            if ((x = 0) | (y = 0)){
                return 0;
            }
            let sum = 0;
            let shiftedx = x;
            let i = 0;
            let signX = (x < 0);  
            let signY = (y < 0);
            while (i < 16){
                if (Math.bit(y,i)){
                    let sum = sum + shiftedx;
                }
                let shiftedx = shiftedx + shiftedx;
                let i = i+1;
            }
            return sum;

        }

        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            var int q,absx,absy,ret;
            var bool signX,signY;
            let signX = (x < 0);  
            let signY = (y < 0);
            let absx = Math.abs(x);
            let absy = Math.abs(y);
            if (y > absx | (y < 0) ){
                let sum_for_division = 0;
                return 0;
            }
            let q = Math.divide(absx,(absy+absy));
            if ((absx -(^sum_for_division)) < absy){
                let ret = ^q; 
            }
            else{
                let sum_for_division = sum_for_division + absy;
                let ret =  (^q+1);
            }
            if (~(signX = signY)) {
            let ret = -ret;
            }
           
            return ret;

        }
        /** Shifts num to the left n times*/
        function int shiftLeft(int num, int n){
            var int i;
            let i = 0;
            while (i < n){
                let num = ^num;
                let i = i + 1;
            }
            return num;
        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y
            var int y,j, temp, sqaure_y, power;
            let y = 0;
            let sqaure_y = 0;
            let j = 7;
            let power = 128;
            while (~(j < 0)){
                let temp = sqaure_y + Math.shiftLeft(y,j+1) + Math.shiftLeft(power,j);
                if (~((temp) > x) & (temp > 0)){
                    let sqaure_y = temp;
                    let y = y + power;
                }
                let j = j - 1;
                let power = #power;
            }
            return y;
        }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if ((a-b) > 0){
                return a;
            }
            return b;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if ((a-b) > 0){
                return b;
            }
            return a;
        }
    }

