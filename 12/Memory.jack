// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array freeList;
    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        
        let ram = 0;
        let heap = 2048; 

        let freeList = heap;
        let freeList[0] = 0; // null next pointer
        let freeList[1] = 14335; // init to entire heap size
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the 
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
        
        var Array node, prev, block;
        let node = freeList;
        let prev = 0;

        while (~(node = 0)) { // while node != null
            if (node[1] > (size+1)) { // node.size >= size+2

                // node.size > size + 2
                if (node[1] > size + 2) {
                    
                    let node[1] = node[1] - size - 2; // node.size = node.size - size - 2
                    
                    let block = node + 2 + node[1] + 1; // align block to carve out
                    let block[-1] = size; // block.size = size
                    let block[-2] = 0; // block.next = null

                    return block;
                }

                // node.size == size + 2;
                else {
                    let block = node + 2;

                    // update head to freeList
                    if (node = freeList) {
                        let freeList = freeList[0]; // freeList = freeList.next
                    }
                    // insert in middle of freeList
                    else {
                        let prev[0] = node[0]; // prev.next = node.next
                    }


                    let block[-2] = 0; // block.next = null
                    return block;
                }
            }

            let prev = node; // update prev
            let node = node[0]; // node = node.next
        }

        return -1; // didn't find space
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
        
        // GIL : i appended the segment to the start of the list

        let o[-2] = freeList; // o.next = freeList
        let freeList = o-2;
        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the 
        // start of the block, and this can be used to implement Memory.max.

        var int max, i, len;
        
        let len = o[-1]; // get block length
        let max = o[0]; // init max

        let i = 1;
        while (i<len) {
            let max = Math.max (max, o[i]);
            let i = i+1;
        }

        return max;
    }
}
