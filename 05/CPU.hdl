// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Mux16(a= instruction, b= aluo, sel= instruction[15], out= inst);
    Not (in = instruction[15], out = n15);
    Or(a=n15, b=instruction[5], out=aload);
    ARegister(in= inst, load= aload, out=aout);
    Mux16(a = aout, b = inM, sel = instruction[12], out = alub);
    And(a = instruction[15], b = instruction[4], out = dload);
    DRegister(in= aluo, load= dload, out= dout);
    ALU(x=dout , y=alub , zx= instruction[11], nx= instruction[10], zy= instruction[9],
    ny= instruction[8], f= instruction[7], no= instruction[6], out= aluo, zr= zr, ng= ng);
    And16(a=aluo, b= aluo, out=outM);
    And (a = instruction[3], b = instruction[15], out = writeM);
    And16(a=aout, b = aout, out[0..14]= addressM, out[15]=null);
    Or(a=zr, b= ng, out= zon);
    Not (in = zon, out = pos);
    And(a=instruction[0], b= pos, out= j3);
    And(a=instruction[1], b= zr, out= j2);
    And(a =instruction[2], b =ng, out = j1);
    Or(a=j1, b=j2, out=j1j2);
    Or(a=j1j2, b=j3, out=j1j2j3);
    And(a=j1j2j3, b=instruction[15], out=jmp);
    Not(in=jmp, out=inc);
    PC(in=aout, load=jmp, inc=inc, reset=reset, out[0..14]=pc, out[15] = null1);
}