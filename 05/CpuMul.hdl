// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
	Mux16(a= instruction, b= aluo, sel= instruction[15], out= inst);
    Not (in = instruction[15], out = n15);
    Or(a=n15, b=instruction[5], out=aload);
    ARegister(in= inst, load= aload, out=aout);
    Mux16(a = aout, b = inM, sel = instruction[12], out = alub);
    And(a = instruction[15], b = instruction[4], out = dload);
    DRegister(in= aluo, load= dload, out= dout);
    ExtendAlu(x = dout, y = alub, instruction = instruction[6..14], out = aluo, zr = zr, ng = ng);
    And16(a=aluo, b= aluo, out=outM);
    And (a = instruction[3], b = instruction[15], out = writeM);
    And16(a=aout, b = aout, out[0..14]= addressM, out[15]=null);
    Or(a=zr, b= ng, out= zon);
    Not (in = zon, out = pos);
    And(a=instruction[0], b= pos, out= j3);
    And(a=instruction[1], b= zr, out= j2);
    And(a =instruction[2], b =ng, out = j1);
    Or(a=j1, b=j2, out=j1j2);
    Or(a=j1j2, b=j3, out=j1j2j3);
    And(a=j1j2j3, b=instruction[15], out=jmp);
    Not(in=jmp, out=inc);
    PC(in=aout, load=jmp, inc=inc, reset=reset, out[0..14]=pc, out[15] = null1);
}
